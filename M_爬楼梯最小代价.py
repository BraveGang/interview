"""

爬楼梯最小代价
给定一个楼梯，你每步可以上 1 阶或者 2 阶，每一阶楼梯上都贴有一个非负整数，表示你在该台阶 所需要付出的代价。
给定一个非负整数数组 𝑐𝑜𝑠𝑡 ，其中 𝑐𝑜𝑠𝑡[𝑖] 表示在第 𝑖 个台阶需要付出的代价， 𝑐𝑜𝑠𝑡[0] 为地面(起始点)。
请计算最少需要付出多少代价才能到达顶部?

"""


def min_cost_climbing_stairs_dp(cost: list[int]) -> int:
    """ 爬楼梯最小代价:动态规划"""
    n = len(cost) - 1
    
    if n == 1 or n == 2:
        return cost[n]
    
    # 初始化 dp 表，用于存储子问题的解
    dp = [0] * (n + 1)
    
    # 初始状态:预设最小子问题的解
    dp[1], dp[2] = cost[1], cost[2]
  
    # 状态转移:从较小子问题逐步求解较大子问题  
    for i in range(3, n + 1):
        dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i]
    return dp[n]

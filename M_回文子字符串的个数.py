"""
字节-飞书-二面:

回文子字符串的个数
给定一个字符串 s ，请计算这个字符串中有多少个回文子字符串。
具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。

输入：s = "abc"
输出：3
解释：三个回文子串: "a", "b", "c"

输入：s = "aaa"
输出：6
解释：6个回文子串: "a", "a", "a", "aa", "aa", "aaa"

方法思路:
我们可以使用中心扩展法来高效地解决这个问题。中心扩展法的核心思想是，对于每个可能的回文中心，向两边扩展，判断有多少个回文子字符串。回文中心可以是一个字符（奇数长度回文）或两个字符之间的位置（偶数长度回文）。通过遍历所有可能的中心，并扩展每个中心，统计所有回文子字符串的数量。
整体复杂度为 O(n²)

具体步骤如下：
1.遍历字符串中的每个字符，将其作为奇数长度回文的中心，并向两边扩展。
2.遍历字符串中的每对相邻字符，将其作为偶数长度回文的中心，并向两边扩展。
3.每次扩展时，检查左右字符是否相同，如果相同则计数加一，否则停止扩展。

"""


'''中心扩展法'''


def countSubstrings(s):
    n = len(s)
    count = 0
    for i in range(n):
        # 处理奇数长度的回文
        left, right = i, i
        while left >= 0 and right < n and s[left] == s[right]:
            count += 1
            left -= 1
            right += 1
        # 处理偶数长度的回文
        left, right = i, i + 1
        while left >= 0 and right < n and s[left] == s[right]:
            count += 1
            left -= 1
            right += 1
    return count



if __name__ == '__main__':
    print(countSubstrings('abc'))
